package minijava.syntax;

import minijava.ast.*;
import static minijava.ast.MJ.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import frontend.SyntaxError;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;


class MiniJavaParser;
   
// Parser code to change the way the parser reports errors (include
// line and column number of the error). 
parser code {:
    
    private Consumer<SyntaxError> onError;

    public void onError(Consumer<SyntaxError> onError) {
        this.onError = onError;
    }
    

    @Override
    public void syntax_error(Symbol info) {

        List<Integer> expectedTokens = expected_token_ids();
        
        int line, column;
        StringBuilder message = new StringBuilder("Unexpected token ");
        if (info instanceof ComplexSymbol) {
            ComplexSymbol s = (ComplexSymbol) info;
            line = s.getLeft().getLine();
            column = s.getLeft().getColumn();
            
            message.append(s.getName());
            
            if (s.value != null) {
                message.append("(");
                message.append(s.value);
                message.append(")");
            }
        } else {
            line = cur_token.left;
            column = cur_token.right;
        }
        
        if (!expectedTokens.isEmpty()) {
            message.append(", expected one of the following: ");
            boolean first = true;
            for (int expected : expectedTokens){
                if (!first) {
                    message.append(", ");
                }
                message.append(symbl_name_from_id(expected));
                first = false;
            }
        }
        
        
        SyntaxError err = new SyntaxError(message.toString(), line, column);
        if (onError == null) {
            System.err.println(err);
        } else {
            onError.accept(err);
        }
    }

    @Override
    public void report_fatal_error(String message, Object info) {
        // ignore
    }
    
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal INVALID_TOKEN;

// Java keywords:
terminal ABSTRACT,  CONTINUE,   FOR,          NEW,         SWITCH,
         ASSERT,    DEFAULT,    IF,           PACKAGE,     SYNCHRONIZED,
         BOOLEAN,   DO,         GOTO,         PRIVATE,     THIS,
         BREAK,     DOUBLE,     IMPLEMENTS,   PROTECTED,   THROW,
         BYTE,      ELSE,       IMPORT,       PUBLIC,      THROWS,
         CASE,      ENUM,       INSTANCEOF,   RETURN,      TRANSIENT,
         CATCH,     EXTENDS,    INT,          SHORT,       TRY,
         CHAR,      FINAL,      INTERFACE,    STATIC,      VOID,
         CLASS,     FINALLY,    LONG,         STRICTFP,    VOLATILE,
         CONST,     FLOAT,      NATIVE,       SUPER,       WHILE;

// additional keywords:
terminal MAIN, STRING, LENGTH, SYSTEM, OUT, PRINTLN;

// symbols:
terminal LBRACE, RBRACE, // { }
         LBRACKET, RBRACKET, // [ ]
         LPAREN, RPAREN, // ()
         DOT, SEMI, COMMA, EQ, NEG, AND, PLUS, MINUS, TIMES, DIV, LESS, EQUALS;

// literals:
terminal TRUE, FALSE, NULL;

//An identifier is a name, ID:name and ID:argName should be different
terminal String   NUMBER, ID;
   
// Non terminals used in the grammar section.  
non terminal MJProgram program;
non terminal MJMainClass mainclass;
non terminal MJClassDecl classdecl;
non terminal MJClassDeclList classdecllist;
non terminal MJMemberDecl memberdecl;
non terminal MJMemberDecl memberdecllist;
non terminal MJStatement statement;
non terminal MJStatement blockstatement;
non terminal MJBlock block;
non terminal MJVarDecl vardecl;
non terminal MJMethodDecl methodecl;
non terminal MJVarDeclList vardeclist;

non terminal MJExpr exp;


//Monireh
non terminal MJType type;

//Rama
non terminal MJOperator op;
non terminal MJExpr expr;
non terminal  MJExprList exprlist;
non terminal  MJExprList exprRest;

//end rama
//Monireh

// a = b, b has high priority
// a = (x+5<10) and (8*y== 45)
precedence right EQ;
precedence left AND;
precedence left EQUALS;
precedence left LESS;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
// -3, 3 has the pirority
precedence right NEG;
precedence left DOT;
precedence left LPAREN;


/* ----------------------------Grammar Section-------------------- */


 program ::=
         mainclass:mc classdecllist:cdl
         {: RESULT = Program(mc, cdl); :}
        ;
    // mc ::= is Wrong we have to use non terminal that we defined.
    // MainClass → class id { public static void main ( String [ ] id ) Block }
    mainclass ::=
        CLASS ID:name LBRACE PUBLIC STATIC VOID MAIN LPAREN
                            STRING LBRACKET RBRACKET ID:argName RPAREN block:body
                        RBRACE
        {:

            //id = new TypeClass(name);

            // RESULT = new MJMainClass(,body);   The Main-class cannot be instantiated
            RESULT = MainClass(name, argName ,body);
        :}
        ;

    // ClassDecl → class id { MemberDecl* }
    //   | class id extends id { MemberDecl* }
    //MemberDecl*  means might appear an arbitrary  number of times (MJClassDeclList)

    classdecl ::=
        CLASS ID:name LBRACE memberdecllist:mdl RBRACE
            {:
                RESULT =  ClassDeclList(name,mdl);
            :}
        | CLASS ID:name EXTENDS ID:extended LBRACE memberdecllist:mdl RBRACE
            {:
                RESULT =  ClassDeclList(name,extended, mdl);
            :}
        ;


    memberdecl ::=
        vardecl:vd    {: RESULT=new MemberDecl(vd); :}
        | methodecl:mtd    {: RESULT= MemberDecl(mtd); :}
    ;

    vardecl ::=
        type:t ID:name SEMI    {:  RESULT =  VarDecl(t,name); :}
    ;

    methodecl::= type:t ID:name LBRACE vardeclist:vdl RBRACE block:b
    {:
    RESULT=  MethodDecl(t,name,vdl,b);:}
    ;

    vardeclist ::= type:t ID:name vardeclist:vdlrest
    {:
    RESULT =  VarDeclList(t,name,vdlrest);:}
    ;

    vardeclist ::= COMMA type:t ID:name
    {:
    RESULT =  VarDeclList(t,name); :}
    ;
//Monireh start
 type ::=
        INT LBRACKET RBRACKET  {: RESULT =  TypeIntArray(); :}
        | BOOLEAN              {: RESULT =  TypeBool(); :}
        | INT                  {: RESULT =  TypeInt(); :}
        | ID:name              {: RESULT =  TypeClass(name); :};
//End of Type
//rama start

//Block -> {Blockstatement*}
block ::=
    LBRACE blockstatement:b RBRACE
     {: RESULT = MJBlock(b); :}
     |LBRACE RBRACE
     {: RESULT = MJBlock(); :};

//BlockStatement -> Statement | type id;
blockstatement ::=
    statement:s
    {: RESULT = MJStatement(s); :}
    | type:t ID:name
    {: RESULT = MJStatement(t, name); :};
    
statement ::=

       block:body
       {: RESULT =  Block(body); :}
       | IF LPAREN expr:e1 RPAREN statement:s1 ELSE statement:s2
        {: RESULT =  StmtIf(e1,s1,s2); :}
       | WHILE LPAREN expr:e1 RPAREN statement:s1
       {: RESULT =  StmtWhile(e1,s1); :}
       | RETURN   expr:e1
       {: RESULT =  StmtReturn(e1); :}
       |SYSTEM DOT OUT DOT PRINTLN  LPAREN expr :e1 RPAREN
       {: RESULT =  StmtPrint(e1); :}
       | expr:e1 SEMI
       {: RESULT =  StmtExpr(e1); :}
       | expr:e1 EQ expr:e2

       {: RESULT =  StmtAssign(e1,e2); :}
;


expr ::=       expr:e1 op:op1 expr:e2
			   {: RESULT =  Operator(e1,e2,op1); :}
			   |NEG expr:e1
			   {: RESULT =  Negate(e1); :}
			   | MINUS  expr:e1
               {: RESULT =  UnaryMinus(e1); :}
			   | expr:e1  LBRACKET expr:e2 RBRACKET
			   {: RESULT =  ArrayLookup(e1,e2); :}
               | expr:e1  DOT LENGTH
                {: RESULT =  ArrayLength(e1); :}
               | expr:e1  DOT ID:id
               {: RESULT =  FieldAccess(e1,id); :}
               | expr:e1  DOT ID:id
               {: RESULT =  MethodCall(e1,id); :}
               | expr:e1  DOT ID:id LPAREN exprlist:el RPAREN
               {: RESULT =  MethodCall(e1,id,el); :}
			   |TRUE
			   {: RESULT =  TypeBool(); :}
			   | FALSE
			   {: RESULT =  TypeBool(); :}
			   | ID:id
			   {: RESULT =  VarDecl(id);  :}
			   | NUMBER:n
                {: RESULT =  Number(Integer.parseInt(n)); :}
			   | THIS:t
			   {: RESULT =  ExprThis(); :}
			   | NULL
               {: RESULT =  ExprNull(); :}
               | NEW INT LBRACKET expr:e1 RBRACKET
			   {: RESULT =  NewIntArray(e1); :}
			   | NEW ID:id LPAREN RPAREN
               {: RESULT =  NewObject(id); :}
               |  LPAREN expr:e1 RPAREN
               {: RESULT =  e1; :}
               ;



exprlist ::=    expr:e1 exprRest:er
              {: RESULT =  ExprList(e1,er); :} ;

exprRest ::=  COMMA  expr: e1
              {: RESULT =  ExprList(e1); :};

//ID ::=
           //  ???;
op::=
          AND {: RESULT = And(); :}
          //| PLUS {: RESULT = MJPlus(); :}
          | expr:el PLUS  expr:er
          {: RESULT = ExprBinary(el,Plus(),er); :}
          | MINUS {: RESULT = Minus(); :}
          | TIMES {: RESULT = Times(); :}
          | DIV {: RESULT = Div(); :}
          | LESS {: RESULT = Less(); :}
          | EQUALS {: RESULT = Equals(); :}
;


//end rama






















